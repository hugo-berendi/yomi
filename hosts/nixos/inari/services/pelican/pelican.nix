{
  config,
  lib,
  pkgs,
  ...
}: let
  dataDir = "/persist/data/pelican";
  logsDir = "/persist/state/pelican/logs";
in {
  yomi.nginx.at.pelican.port = config.yomi.ports.pelican-panel;

  systemd.tmpfiles.rules = [
    "d ${dataDir} 0777 root root"
    "d ${logsDir} 0777 root root"
    "d ${logsDir}/supervisord 0777 root root"
  ];

  virtualisation.oci-containers.containers."pelican-panel" = {
    image = "ghcr.io/pelican-dev/panel:latest";
    environment = {
      "ADMIN_EMAIL" = "pelican@hugo-berendi.de";
      "APP_URL" = config.yomi.nginx.at.pelican.url;
      "XDG_DATA_HOME" = "/pelican-data";
    };
    volumes = [
      "${dataDir}:/pelican-data:rw"
      "${logsDir}:/var/www/html/storage/logs:rw"
      "${toString ./Caddyfile}:/etc/caddy/Caddyfile"
    ];
    ports = [
      "${toString config.yomi.nginx.at.pelican.port}:80"
    ];
    log-driver = "journald";
    extraOptions = [
      "--add-host=host.docker.internal:host-gateway"
      "--network-alias=panel"
      "--network=pelican_default"
    ];
  };
  systemd.services."docker-pelican-panel" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-pelican_default.service"
    ];
    requires = [
      "docker-network-pelican_default.service"
    ];
    partOf = [
      "docker-compose-pelican-root.target"
    ];
    wantedBy = [
      "docker-compose-pelican-root.target"
    ];
  };

  systemd.services."docker-network-pelican_default" = {
    path = [pkgs.docker];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f pelican_default";
    };
    script = ''
      docker network inspect pelican_default || docker network create pelican_default --subnet=172.20.0.0/16
    '';
    partOf = ["docker-compose-pelican-root.target"];
    wantedBy = ["docker-compose-pelican-root.target"];
  };

  systemd.targets."docker-compose-pelican-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
